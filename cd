predictive parser%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>
#include <string.h>
char prol[7][10] = { "S", "A", "A", "B", "B", "C", "C" };
char pror[7][10] = { "A", "Bb", "Cd", "aB", "@", "Cc", "@" };
char prod[7][10] = { "S->A", "A->Bb", "A->Cd", "B->aB", "B->@", "C->Cc", "C->@" };
char first[7][10] = { "abcd", "ab", "cd", "a@", "@", "c@", "@" };
char follow[7][10] = { "$", "$", "$", "a$", "b$", "c$", "d$" };
char table[5][6][10];
int numr(char c)
{
switch (c)
{
case 'S':
return 0;
case 'A':
return 1;
case 'B':
return 2;
case 'C':
return 3;
case 'a':
return 0;
case 'b':
return 1;
case 'c':
return 2;
case 'd':
return 3;
case '$':
return 4;
}
return (2);
}
int main()
{
int i, j, k;
for (i = 0; i < 5; i++)
for (j = 0; j < 6; j++)
strcpy(table[i][j], " ");
printf("The following grammar is used for Parsing Table:\n");
for (i = 0; i < 7; i++)
printf("%s\n", prod[i]);
printf("\nPredictive parsing table:\n");
fflush(stdin);
for (i = 0; i < 7; i++){

VNR VJIET SHEET NO: EXPT NO:

k = strlen(first[i]);
for (j = 0; j < 10; j++)
if (first[i][j] != '@')
strcpy(table[numr(prol[i][0]) + 1][numr(first[i][j]) + 1],
prod[i]);
}
for (i = 0; i < 7; i++)
{
if (strlen(pror[i]) == 1)
{
if (pror[i][0] == '@')
{
k = strlen(follow[i]);
for (j = 0; j < k; j++)
strcpy(table[numr(prol[i][0]) + 1][numr(follow[i][j]) + 1], prod[i]);
}
}
}
strcpy(table[0][0], " ");
strcpy(table[0][1], "a");
strcpy(table[0][2], "b");
strcpy(table[0][3], "c");
strcpy(table[0][4], "d");
strcpy(table[0][5], "$");
strcpy(table[1][0], "S");
strcpy(table[2][0], "A");
strcpy(table[3][0], "B");
strcpy(table[4][0], "C");
printf("\n--------------------------------------------------------\n");
for (i = 0; i < 5; i++)
for (j = 0; j < 6; j++)
{
printf("%-10s", table[i][j]);
if (j == 5)
printf("\n--------------------------------------------------------\n");


#################################################  

//lex code
%{
#include<stdio.h>
%}
digit [0-9]+
word [A-Za-z]+
spsym [(){};,%\{\]]
arith [+-/*]
whitspc[ \t\n]
underscr[_]
%%
{whitspc}+ ;
\"[^\n\"]*\" {printf("\n %s is a literal",yytext);}
int |
include |
if |
else |
while |
do |
switch |
case |
default |
break |
continue |
scanf {printf("\n%s is a Keyword",yytext);}
{spsym} {printf("\n%s is a Special Symbol",yytext);}
{arith} {printf("\n%s is a Binary Operator",yytext);}
= {printf("\n%s is a Assignment operator",yytext);}
"++" |"--" {printf("\n%s is an Unary Operator",yytext);}
"&" |"|" |"^" {printf("\n %s is bitwise operator",yytext);}
"<" |">" |"<=" |">=" |"==" |"!=" {printf("\n %s is a relational
operator",yytext);}
{digit}+ {printf("\n %s is an integer constant",yytext);}
({digit}+)|({digit}*\.{digit}+) {printf("\n %s is an float
constant",yytext);}
({word}({word}|{digit}|{underscr})*) {printf("\n%s is a
Identifier",yytext);}
%%
int main(int argc,char *argv[])
{
FILE *fp;
fp=fopen(argv[1],"r");
if(!fp)
{

printf("cnt open:%s",argv[1]);
exit(1);
}
yyin=fp;
yylex();
}
int yywrap()
{
return 1;
} 4
Input:
//var.c
#include<stdio.h>
#include<conio.h>
void main()
{
int a,b,c;
a=1;
b=2;
c=a+b;
printf("Sum:%d",c);
}
O/P :


####################################################################
//lex
%{
#include "y.tab.h"
%}
%%
[a-zA-Z_][a-zA-Z_0-9]* return id;
[0-9]+(\.[0-9]*)? return num;
[+/*] return op;
. return yytext[0];
\n return 0;
%%
int yywrap()
{
return 1;
}
//yacc
%{
#include<stdio.h>
int valid=1;
%}
%token num id op
%%
start : id '=' s ';'
s : id x
| num x
| '-' num x
| '(' s ')' x
;
x : op s
| '-' s
|
;
%%
int yyerror()
{
valid=0;
printf("\nInvalid expression!\n");
return 0;
}
int main()
{
printf("\nEnter the expression:\n");
yyparse();
if(valid)
{

VNR VJIET SHEET NO: EXPT NO:

printf("\nValid expression!\n");
}
}
O/P :

##############################################
