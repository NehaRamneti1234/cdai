

















# depth limit search

Graph = {
 'A': ['B', 'C'],
 'B': ['D', 'E'],
 'C': ['F'],
 'D': [],
 'E': [],
 'F': []
}
# Path to find the goal node
p = []

def dls(graph, node, visited, limit, goal, path):
 global p
 if visited is None:
 visited = set()
 path.append(node)
 if node == goal:
 p = path[:]
 print("Node found")
 return True
 visited.add(node)
 if limit > 1:
 for adj_node in graph[node]:
 if adj_node not in visited:
 dls(graph, adj_node, visited, limit - 1, goal, path + [adj_node])
limit = 3
visited = None
goal = 'F'
start = 'A'
print("DFS traversal for the graph is: ")
Page | 5
dls(Graph, start, visited, limit, goal, [])
if p:
 print(f"Node {start} is found in the limit {limit}")
 print("The path is: ")
 print('->'.join(p))
else:
 print(f"Node {start} is not found in the limit {limit}")
Output:
DFS traversal for the graph is

Write a program to implement heuristic approach
Code:
from queue import PriorityQueue
# no.of vertices
v = 6
# Declaring the graph
graph = [[] for i in range(v)]
def best_first_search(src, des, pq):
 global v
 pq.put((0, src)) # heuristic_function, vertex as it should be in cost priority
 parent = [-1] * v # To keep track of the parent node for each vertex
 visited = [False] * v
 visited[src] = True
 while not pq.empty():
 _, u = pq.get()
 if u == des:
 # Reconstruct the path from the parent array
 path = []
 while u != -1:
 path.insert(0, u)
 u = parent[u]
 return path
 for v, cost in graph[u]:
 if not visited[v]:
 visited[v] = True
 parent[v] = u
 pq.put((heuristic_function[v] , v))
 return None
# Adding edge to the graph
def add_edge(x, y, cost):
 graph[x].append([y, cost])
 graph[y].append([x, cost])
Page | 7
add_edge(0, 1, 5)
add_edge(0, 2, 7)
add_edge(1, 3, 6)
add_edge(1, 4, 2)
add_edge(2, 4, 3)
add_edge(3, 5, 10)
add_edge(4, 5, 2)
heuristic_function = {
 0: 3,
 1: 5,
 2: 4,
 3: 6,
 4: 7,
 5: 8
}
source = 0
destination = 5
# Make heuristic_function as 0 for the destination
heuristic_function[destination] = 0
pq = PriorityQueue()
path = best_first_search(source, destination, pq)
if path:
 print("Path:", ' -> '.join(map(str, path)))
else:
 print("No path found.")
Output:
Path: 0 -> 1 -> 3 -> 5



 _Illustrate Knowledge representation using online tools.
1. To prove that Marcus is not alive in the year 1991.
Code:
male(marcus).
male(alexander).
pompeian(marcus).
erupted(vocano,79).
born(marcus,40).
born(alexander,42).
mortal(X):-male(X).
gt(T1,T2):-T1&gt;T2.
died(X,T):-(pompeian(X),gt(T,78));(born(X,Z),(gt(T-Z,150);T-Z&lt;0)).
alive(X,T):-not(died(X,T)).
O/P:
?- alive(marcus,80).
false.
?- died(marcus,80).
True
2. To check whether marcus is loyalto Caesar or not.
Code:
man(marcus).
man(caesar).
ruler(caesar).
pompenian(marcus).
person(X):-man(X).
roman(X):-loyalto(X,caesar);hate(X,caesar).
roman(X):-pompenian(X).
hate(X,Y):-tryassassinate(X,Y).
tryassassinate(marcus,caesar).
loyalto(X,Y):-person(X),ruler(Y),not(tryassassinate(X,Y)).
O/P:
?- loyalto(marcus,caesar).
Page | 15
false.
3. To check the relationships between family members.
Code:
boy(jim).
boy(bob).
boy(tom).
boy(peter).
girl(pam).
girl(liz).
girl(pat).
girl(ann).
parent(pam,bob).
parent(tom,bob).
parent(tom,liz).
parent(bob,ann).
parent(bob,pat).
parent(pat,jim).
parent(bob,peter).
parent(peter,jim).
mother(X,Y):- parent(X,Y),girl(X).
father(X,Y):-parent(X,Y),boy(X).
haschild(X):-parent(X,_).
sister(X,Y):-parent(Z,X),parent(Z,Y),girl(X),X\==Y.
brother(X,Y):-parent(Z,X),parent(Z,Y),boy(X),X\==Y.
O/P:
?- mother(pam,bob).
true.
?- father(tom,bob).
true.




